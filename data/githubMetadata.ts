import * as fs from 'fs'
import * as path from 'path'

export interface GithubRepositoryMetadata {
  description: string | null
  license: { spdx_id: string; name: string; url: string } | null
  topics: string[] | null
  stargazers: number | null
}

/**
 * Reads GitHub metadata from static JSON files generated by GitHub Actions.
 * This replaces client-side API calls with build-time static data.
 */
export async function getGithubRepositoryMetadata(
  moduleName: string
): Promise<GithubRepositoryMetadata | null> {
  try {
    const metadataPath = path.join(
      process.cwd(),
      'data',
      'github_metadata',
      `${moduleName}.github_metadata.json`
    )

    if (!fs.existsSync(metadataPath)) {
      return null
    }

    const fileContent = fs.readFileSync(metadataPath, 'utf-8')
    const rawData = JSON.parse(fileContent)

    // Transform the GitHub API response format to our interface
    return {
      description: rawData.description || null,
      license: rawData.licenseInfo
        ? {
            spdx_id: rawData.licenseInfo.key || '',
            name: rawData.licenseInfo.name || '',
            url: rawData.licenseInfo.key
              ? `https://opensource.org/licenses/${rawData.licenseInfo.key}`
              : '',
          }
        : null,
      topics:
        rawData.repositoryTopics?.nodes?.map(
          (topic: { name: string }) => topic.name
        ) || null,
      stargazers: rawData.stargazerCount || null,
    }
  } catch (error) {
    console.warn(`Failed to read GitHub metadata for ${moduleName}:`, error)
    return null
  }
}
